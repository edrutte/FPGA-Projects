-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256chunk_sha256chunk_Pipeline_VITIS_LOOP_91_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (31 downto 0);
    e_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    f_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    g_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    h : IN STD_LOGIC_VECTOR (31 downto 0);
    Schedule_Schedule_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_Schedule_1_ce0 : OUT STD_LOGIC;
    Schedule_Schedule_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_out_ap_vld : OUT STD_LOGIC;
    b_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_out_ap_vld : OUT STD_LOGIC;
    c_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_out_ap_vld : OUT STD_LOGIC;
    d_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_1_out_ap_vld : OUT STD_LOGIC;
    e_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    e_3_out_ap_vld : OUT STD_LOGIC;
    f_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    f_out_ap_vld : OUT STD_LOGIC;
    g_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    g_out_ap_vld : OUT STD_LOGIC;
    h_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    h_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha256chunk_sha256chunk_Pipeline_VITIS_LOOP_91_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_ce0 : STD_LOGIC;
    signal k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln91_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal g_4_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_4_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_3_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal h_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal d_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_d_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_fu_324_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_2_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_2_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln52_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_356_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln52_1_fu_388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln52_1_fu_378_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln52_2_fu_410_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln52_2_fu_400_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln_fu_370_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_1_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln92_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_2_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln93_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln93_1_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln93_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S1_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_2_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln52_3_fu_530_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln52_3_fu_520_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln52_4_fu_552_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln52_4_fu_542_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln52_5_fu_574_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln52_5_fu_564_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln52_3_fu_534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_4_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln95_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_5_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln96_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln96_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln96_1_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S0_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maj_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256chunk_sha256chunk_Pipeline_VITIS_LOOP_91_1_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256chunk_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    k_U : component sha256chunk_sha256chunk_Pipeline_VITIS_LOOP_91_1_k
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_address0,
        ce0 => k_ce0,
        q0 => k_q0);

    flow_control_loop_pipe_sequential_init_U : component sha256chunk_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    b_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    b_fu_136 <= a_1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_0))) then 
                    b_fu_136 <= a_fu_627_p2;
                end if;
            end if; 
        end if;
    end process;

    c_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    c_fu_132 <= b_1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_0))) then 
                    c_fu_132 <= b_fu_136;
                end if;
            end if; 
        end if;
    end process;

    d_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    d_1_fu_108 <= d;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_0))) then 
                    d_1_fu_108 <= d_2_fu_128;
                end if;
            end if; 
        end if;
    end process;

    d_2_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    d_2_fu_128 <= c_1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_0))) then 
                    d_2_fu_128 <= c_fu_132;
                end if;
            end if; 
        end if;
    end process;

    f_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_fu_124 <= e_1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_726 = ap_const_lv1_0))) then 
                    f_fu_124 <= e_fu_482_p2;
                end if;
            end if; 
        end if;
    end process;

    g_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    g_fu_120 <= f_1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_726 = ap_const_lv1_0))) then 
                    g_fu_120 <= f_fu_124;
                end if;
            end if; 
        end if;
    end process;

    h_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_1_fu_104 <= h;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_726 = ap_const_lv1_0))) then 
                    h_1_fu_104 <= h_2_fu_116;
                end if;
            end if; 
        end if;
    end process;

    h_2_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_2_fu_116 <= g_1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_726 = ap_const_lv1_0))) then 
                    h_2_fu_116 <= g_fu_120;
                end if;
            end if; 
        end if;
    end process;

    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_318_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_112 <= add_ln91_fu_324_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_112 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln91_reg_726 <= icmp_ln91_fu_318_p2;
                icmp_ln91_reg_726_pp0_iter1_reg <= icmp_ln91_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                e_3_reg_750 <= f_fu_124;
                f_4_reg_745 <= g_fu_120;
                g_4_reg_740 <= h_2_fu_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln91_reg_726 = ap_const_lv1_0))) then
                temp1_reg_755 <= temp1_fu_476_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    S0_fu_592_p2 <= (xor_ln95_fu_586_p2 xor or_ln52_5_fu_578_p3);
    S1_fu_428_p2 <= (xor_ln92_fu_422_p2 xor or_ln52_2_fu_414_p3);
    Schedule_Schedule_1_address0 <= i_cast_fu_330_p1(6 - 1 downto 0);

    Schedule_Schedule_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_Schedule_1_ce0 <= ap_const_logic_1;
        else 
            Schedule_Schedule_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_out <= b_fu_136;

    a_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            a_3_out_ap_vld <= ap_const_logic_1;
        else 
            a_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_627_p2 <= std_logic_vector(unsigned(add_ln105_fu_622_p2) + unsigned(maj_fu_616_p2));
    add_ln105_fu_622_p2 <= std_logic_vector(unsigned(temp1_reg_755) + unsigned(S0_fu_592_p2));
    add_ln91_fu_324_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    add_ln94_1_fu_464_p2 <= std_logic_vector(unsigned(S1_fu_428_p2) + unsigned(ch_fu_452_p2));
    add_ln94_2_fu_470_p2 <= std_logic_vector(unsigned(add_ln94_1_fu_464_p2) + unsigned(h_1_fu_104));
    add_ln94_fu_458_p2 <= std_logic_vector(unsigned(k_q0) + unsigned(Schedule_Schedule_1_q0));
    and_ln93_1_fu_446_p2 <= (xor_ln93_fu_440_p2 and h_2_fu_116);
    and_ln93_fu_434_p2 <= (g_fu_120 and f_fu_124);
    and_ln96_1_fu_610_p2 <= (d_2_fu_128 and c_fu_132);
    and_ln96_fu_604_p2 <= (xor_ln96_fu_598_p2 and b_fu_136);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_318_p2)
    begin
        if (((icmp_ln91_fu_318_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_d_1_load_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln91_reg_726_pp0_iter1_reg, ap_block_pp0_stage0, d_1_fu_108, d_2_fu_128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_sig_allocacmp_d_1_load <= d_2_fu_128;
        else 
            ap_sig_allocacmp_d_1_load <= d_1_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_112;
        end if; 
    end process;

    b_out <= c_fu_132;

    b_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            b_out_ap_vld <= ap_const_logic_1;
        else 
            b_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_out <= d_2_fu_128;

    c_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            c_out_ap_vld <= ap_const_logic_1;
        else 
            c_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_452_p2 <= (and_ln93_fu_434_p2 xor and_ln93_1_fu_446_p2);
    d_1_out <= d_1_fu_108;

    d_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            d_1_out_ap_vld <= ap_const_logic_1;
        else 
            d_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_3_out <= e_3_reg_750;

    e_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            e_3_out_ap_vld <= ap_const_logic_1;
        else 
            e_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_482_p2 <= std_logic_vector(unsigned(temp1_fu_476_p2) + unsigned(ap_sig_allocacmp_d_1_load));
    f_out <= f_4_reg_745;

    f_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            f_out_ap_vld <= ap_const_logic_1;
        else 
            f_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    g_out <= g_4_reg_740;

    g_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            g_out_ap_vld <= ap_const_logic_1;
        else 
            g_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_1_out <= h_1_fu_104;

    h_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln91_reg_726_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln91_reg_726_pp0_iter1_reg = ap_const_lv1_1))) then 
            h_1_out_ap_vld <= ap_const_logic_1;
        else 
            h_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln91_fu_318_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_40) else "0";
    k_address0 <= i_cast_fu_330_p1(6 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln52_1_fu_378_p4 <= f_fu_124(31 downto 11);
    lshr_ln52_2_fu_400_p4 <= f_fu_124(31 downto 25);
    lshr_ln52_3_fu_520_p4 <= b_fu_136(31 downto 2);
    lshr_ln52_4_fu_542_p4 <= b_fu_136(31 downto 13);
    lshr_ln52_5_fu_564_p4 <= b_fu_136(31 downto 22);
    lshr_ln_fu_356_p4 <= f_fu_124(31 downto 6);
    maj_fu_616_p2 <= (and_ln96_fu_604_p2 xor and_ln96_1_fu_610_p2);
    or_ln52_1_fu_392_p3 <= (trunc_ln52_1_fu_388_p1 & lshr_ln52_1_fu_378_p4);
    or_ln52_2_fu_414_p3 <= (trunc_ln52_2_fu_410_p1 & lshr_ln52_2_fu_400_p4);
    or_ln52_3_fu_534_p3 <= (trunc_ln52_3_fu_530_p1 & lshr_ln52_3_fu_520_p4);
    or_ln52_4_fu_556_p3 <= (trunc_ln52_4_fu_552_p1 & lshr_ln52_4_fu_542_p4);
    or_ln52_5_fu_578_p3 <= (trunc_ln52_5_fu_574_p1 & lshr_ln52_5_fu_564_p4);
    or_ln_fu_370_p3 <= (trunc_ln52_fu_366_p1 & lshr_ln_fu_356_p4);
    temp1_fu_476_p2 <= std_logic_vector(unsigned(add_ln94_2_fu_470_p2) + unsigned(add_ln94_fu_458_p2));
    trunc_ln52_1_fu_388_p1 <= f_fu_124(11 - 1 downto 0);
    trunc_ln52_2_fu_410_p1 <= f_fu_124(25 - 1 downto 0);
    trunc_ln52_3_fu_530_p1 <= b_fu_136(2 - 1 downto 0);
    trunc_ln52_4_fu_552_p1 <= b_fu_136(13 - 1 downto 0);
    trunc_ln52_5_fu_574_p1 <= b_fu_136(22 - 1 downto 0);
    trunc_ln52_fu_366_p1 <= f_fu_124(6 - 1 downto 0);
    xor_ln92_fu_422_p2 <= (or_ln_fu_370_p3 xor or_ln52_1_fu_392_p3);
    xor_ln93_fu_440_p2 <= (f_fu_124 xor ap_const_lv32_FFFFFFFF);
    xor_ln95_fu_586_p2 <= (or_ln52_4_fu_556_p3 xor or_ln52_3_fu_534_p3);
    xor_ln96_fu_598_p2 <= (d_2_fu_128 xor c_fu_132);
end behav;
