-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256chunk_scheduleHash_Pipeline_VITIS_LOOP_72_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Schedule_0_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_0_buf_ce0 : OUT STD_LOGIC;
    Schedule_0_buf_we0 : OUT STD_LOGIC;
    Schedule_0_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Schedule_0_buf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_0_buf_ce1 : OUT STD_LOGIC;
    Schedule_0_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Schedule_0_buf_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_0_buf_ce2 : OUT STD_LOGIC;
    Schedule_0_buf_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    Schedule_0_buf_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_0_buf_ce3 : OUT STD_LOGIC;
    Schedule_0_buf_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    Schedule_0_buf_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Schedule_0_buf_ce4 : OUT STD_LOGIC;
    Schedule_0_buf_q4 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256chunk_scheduleHash_Pipeline_VITIS_LOOP_72_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln72_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_2_reg_378 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln73_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln74_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln72_fu_197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln73_fu_149_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln73_fu_153_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln74_fu_164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln75_fu_175_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln75_1_fu_186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln52_fu_222_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_fu_212_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln52_6_fu_244_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln52_6_fu_234_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln1_fu_256_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln73_1_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_6_fu_248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln73_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln52_7_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln52_7_fu_282_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln52_8_fu_314_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln52_8_fu_304_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln2_fu_326_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln74_1_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_8_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln74_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_7_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s0_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln75_3_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln75_2_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256chunk_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sha256chunk_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln72_fu_143_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_70 <= add_ln72_fu_197_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv7_10;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_reg_378 <= ap_sig_allocacmp_i_2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Schedule_0_buf_address0 <= i_cast_fu_208_p1(6 - 1 downto 0);
    Schedule_0_buf_address1 <= zext_ln75_1_fu_192_p1(6 - 1 downto 0);
    Schedule_0_buf_address2 <= zext_ln75_fu_181_p1(6 - 1 downto 0);
    Schedule_0_buf_address3 <= zext_ln74_fu_170_p1(6 - 1 downto 0);
    Schedule_0_buf_address4 <= zext_ln73_fu_159_p1(6 - 1 downto 0);

    Schedule_0_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_ce0 <= ap_const_logic_1;
        else 
            Schedule_0_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Schedule_0_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_ce1 <= ap_const_logic_1;
        else 
            Schedule_0_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Schedule_0_buf_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_ce2 <= ap_const_logic_1;
        else 
            Schedule_0_buf_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Schedule_0_buf_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_ce3 <= ap_const_logic_1;
        else 
            Schedule_0_buf_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    Schedule_0_buf_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_ce4 <= ap_const_logic_1;
        else 
            Schedule_0_buf_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    Schedule_0_buf_d0 <= std_logic_vector(unsigned(add_ln75_3_fu_358_p2) + unsigned(add_ln75_2_fu_352_p2));

    Schedule_0_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Schedule_0_buf_we0 <= ap_const_logic_1;
        else 
            Schedule_0_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln72_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv7_1));
    add_ln73_fu_153_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_149_p1) + unsigned(ap_const_lv6_31));
    add_ln74_fu_164_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_149_p1) + unsigned(ap_const_lv6_3E));
    add_ln75_1_fu_186_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_149_p1) + unsigned(ap_const_lv6_39));
    add_ln75_2_fu_352_p2 <= std_logic_vector(unsigned(Schedule_0_buf_q2) + unsigned(Schedule_0_buf_q1));
    add_ln75_3_fu_358_p2 <= std_logic_vector(unsigned(s0_fu_276_p2) + unsigned(s1_fu_346_p2));
    add_ln75_fu_175_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_149_p1) + unsigned(ap_const_lv6_30));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln72_fu_143_p2)
    begin
        if (((icmp_ln72_fu_143_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv7_10;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_70;
        end if; 
    end process;

    i_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_378),64));
    icmp_ln72_fu_143_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv7_40) else "0";
    lshr_ln1_fu_256_p4 <= Schedule_0_buf_q4(31 downto 3);
    lshr_ln2_fu_326_p4 <= Schedule_0_buf_q3(31 downto 10);
    lshr_ln52_6_fu_234_p4 <= Schedule_0_buf_q4(31 downto 18);
    lshr_ln52_7_fu_282_p4 <= Schedule_0_buf_q3(31 downto 17);
    lshr_ln52_8_fu_304_p4 <= Schedule_0_buf_q3(31 downto 19);
    lshr_ln_fu_212_p4 <= Schedule_0_buf_q4(31 downto 7);
    or_ln52_6_fu_248_p3 <= (trunc_ln52_6_fu_244_p1 & lshr_ln52_6_fu_234_p4);
    or_ln52_7_fu_296_p3 <= (trunc_ln52_7_fu_292_p1 & lshr_ln52_7_fu_282_p4);
    or_ln52_8_fu_318_p3 <= (trunc_ln52_8_fu_314_p1 & lshr_ln52_8_fu_304_p4);
    or_ln_fu_226_p3 <= (trunc_ln52_fu_222_p1 & lshr_ln_fu_212_p4);
    s0_fu_276_p2 <= (xor_ln73_fu_270_p2 xor or_ln_fu_226_p3);
    s1_fu_346_p2 <= (xor_ln74_fu_340_p2 xor or_ln52_7_fu_296_p3);
    trunc_ln52_6_fu_244_p1 <= Schedule_0_buf_q4(18 - 1 downto 0);
    trunc_ln52_7_fu_292_p1 <= Schedule_0_buf_q3(17 - 1 downto 0);
    trunc_ln52_8_fu_314_p1 <= Schedule_0_buf_q3(19 - 1 downto 0);
    trunc_ln52_fu_222_p1 <= Schedule_0_buf_q4(7 - 1 downto 0);
    trunc_ln73_fu_149_p1 <= ap_sig_allocacmp_i_2(6 - 1 downto 0);
    xor_ln73_fu_270_p2 <= (zext_ln73_1_fu_266_p1 xor or_ln52_6_fu_248_p3);
    xor_ln74_fu_340_p2 <= (zext_ln74_1_fu_336_p1 xor or_ln52_8_fu_318_p3);
    zext_ln73_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_256_p4),32));
    zext_ln73_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_fu_153_p2),64));
    zext_ln74_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_326_p4),32));
    zext_ln74_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_164_p2),64));
    zext_ln75_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_186_p2),64));
    zext_ln75_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_175_p2),64));
end behav;
